!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=112)}([function(t,n,e){(function(n){var e=function(t){return t&&t.Math==Math&&t};t.exports=e("object"==typeof globalThis&&globalThis)||e("object"==typeof window&&window)||e("object"==typeof self&&self)||e("object"==typeof n&&n)||Function("return this")()}).call(this,e(49))},function(t,n,e){var r=e(0),o=e(10),c=e(24),i=e(42),u=r.Symbol,a=o("wks");t.exports=function(t){return a[t]||(a[t]=i&&u[t]||(i?u:c)("Symbol."+t))}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){"use strict";e.d(n,"g",(function(){return r})),e.d(n,"l",(function(){return o})),e.d(n,"i",(function(){return c})),e.d(n,"k",(function(){return i})),e.d(n,"j",(function(){return u})),e.d(n,"b",(function(){return a})),e.d(n,"c",(function(){return f})),e.d(n,"m",(function(){return s})),e.d(n,"e",(function(){return l})),e.d(n,"d",(function(){return p})),e.d(n,"f",(function(){return v})),e.d(n,"h",(function(){return d})),e.d(n,"a",(function(){return y}));var r=5184e5,o=document.querySelector(".search__input"),c=document.querySelector(".news-card"),i=document.querySelector(".search__button"),u=document.querySelector(".search__field"),a=0,f=20,s="https://api.github.com/repos/AndreyZadachin/DiplomFront/commits",l=document.querySelector(".request__title-span"),p=document.querySelector(".request__text-span"),v=document.querySelector(".request__text-span_title"),d=(document.querySelectorAll(".analitic__table-date"),["ЯНВАРЬ","ФЕВРАЛЬ","МАРТ","АПРЕЛЬ","МАЙ","ИЮНЬ","ИЮЛЬ","АВГУСТ","СЕНТЯБРЬ","ОКТЯБРЬ","НОЯБРЬ","ДЕКАБРЬ"]),y=["вс","пн","вт","ср","чт","пт","сб"]},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(3);t.exports=!r((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,n,e){var r=e(2);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,n,e){var r=e(6),o=e(11),c=e(23);t.exports=r?function(t,n,e){return o.f(t,n,c(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n,e){var r=e(27),o=e(53);(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:"3.4.1",mode:r?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){var r=e(6),o=e(28),c=e(7),i=e(22),u=Object.defineProperty;n.f=r?u:function(t,n,e){if(c(t),n=i(n,!0),c(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(45),o=e(0),c=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,n){return arguments.length<2?c(r[t])||c(o[t]):r[t]&&r[t][n]||o[t]&&o[t][n]}},function(t,n,e){var r=e(25),o=e(21);t.exports=function(t){return r(o(t))}},function(t,n,e){var r=e(0),o=e(10),c=e(8),i=e(5),u=e(16),a=e(30),f=e(31),s=f.get,l=f.enforce,p=String(a).split("toString");o("inspectSource",(function(t){return a.call(t)})),(t.exports=function(t,n,e,o){var a=!!o&&!!o.unsafe,f=!!o&&!!o.enumerable,s=!!o&&!!o.noTargetGet;"function"==typeof e&&("string"!=typeof n||i(e,"name")||c(e,"name",n),l(e).source=p.join("string"==typeof n?n:"")),t!==r?(a?!s&&t[n]&&(f=!0):delete t[n],f?t[n]=e:c(t,n,e)):f?t[n]=e:u(n,e)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||a.call(this)}))},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,n,e){var r=e(0),o=e(8);t.exports=function(t,n){try{o(r,t,n)}catch(e){r[t]=n}return n}},function(t,n,e){var r=e(6),o=e(43),c=e(23),i=e(13),u=e(22),a=e(5),f=e(28),s=Object.getOwnPropertyDescriptor;n.f=r?s:function(t,n){if(t=i(t),n=u(n,!0),f)try{return s(t,n)}catch(t){}if(a(t,n))return c(!o.f.call(t,n),t[n])}},function(t,n,e){var r=e(26),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,n){t.exports={}},function(t,n,e){var r=e(15);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 0:return function(){return t.call(n)};case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,n,e){var r=e(2);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+r).toString(36)}},function(t,n,e){var r=e(3),o=e(9),c="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?c.call(t,""):Object(t)}:Object},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n){t.exports=!1},function(t,n,e){var r=e(6),o=e(3),c=e(29);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(c("div"),"a",{get:function(){return 7}}).a}))},function(t,n,e){var r=e(0),o=e(2),c=r.document,i=o(c)&&o(c.createElement);t.exports=function(t){return i?c.createElement(t):{}}},function(t,n,e){var r=e(10);t.exports=r("native-function-to-string",Function.toString)},function(t,n,e){var r,o,c,i=e(55),u=e(0),a=e(2),f=e(8),s=e(5),l=e(33),p=e(19),v=u.WeakMap;if(i){var d=new v,y=d.get,h=d.has,g=d.set;r=function(t,n){return g.call(d,t,n),n},o=function(t){return y.call(d,t)||{}},c=function(t){return h.call(d,t)}}else{var m=l("state");p[m]=!0,r=function(t,n){return f(t,m,n),n},o=function(t){return s(t,m)?t[m]:{}},c=function(t){return s(t,m)}}t.exports={set:r,get:o,has:c,enforce:function(t){return c(t)?o(t):r(t,{})},getterFor:function(t){return function(n){var e;if(!a(n)||(e=o(n)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return e}}}},,function(t,n,e){var r=e(10),o=e(24),c=r("keys");t.exports=function(t){return c[t]||(c[t]=o(t))}},function(t,n,e){var r=e(0),o=e(17).f,c=e(8),i=e(14),u=e(16),a=e(44),f=e(37);t.exports=function(t,n){var e,s,l,p,v,d=t.target,y=t.global,h=t.stat;if(e=y?r:h?r[d]||u(d,{}):(r[d]||{}).prototype)for(s in n){if(p=n[s],l=t.noTargetGet?(v=o(e,s))&&v.value:e[s],!f(y?s:d+(h?".":"#")+s,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;a(p,l)}(t.sham||l&&l.sham)&&c(p,"sham",!0),i(e,s,p,t)}}},function(t,n,e){var r=e(46),o=e(36).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,n){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,n,e){var r=e(3),o=/#|\.prototype\./,c=function(t,n){var e=u[i(t)];return e==f||e!=a&&("function"==typeof n?r(n):!!n)},i=c.normalize=function(t){return String(t).replace(o,".").toLowerCase()},u=c.data={},a=c.NATIVE="N",f=c.POLYFILL="P";t.exports=c},,function(t,n,e){var r=e(20),o=e(25),c=e(40),i=e(18),u=e(52),a=[].push,f=function(t){var n=1==t,e=2==t,f=3==t,s=4==t,l=6==t,p=5==t||l;return function(v,d,y,h){for(var g,m,S=c(v),x=o(S),b=r(d,y,3),w=i(x.length),_=0,O=h||u,L=n?O(v,w):e?O(v,0):void 0;w>_;_++)if((p||_ in x)&&(m=b(g=x[_],_,S),t))if(n)L[_]=m;else if(m)switch(t){case 3:return!0;case 5:return g;case 6:return _;case 2:a.call(L,g)}else if(s)return!1;return l?-1:f||s?s:L}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6)}},function(t,n,e){var r=e(21);t.exports=function(t){return Object(r(t))}},function(t,n,e){var r=e(9);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(3);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,n,e){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,c=o&&!r.call({1:2},1);n.f=c?function(t){var n=o(this,t);return!!n&&n.enumerable}:r},function(t,n,e){var r=e(5),o=e(57),c=e(17),i=e(11);t.exports=function(t,n){for(var e=o(n),u=i.f,a=c.f,f=0;f<e.length;f++){var s=e[f];r(t,s)||u(t,s,a(n,s))}}},function(t,n,e){t.exports=e(0)},function(t,n,e){var r=e(5),o=e(13),c=e(58).indexOf,i=e(19);t.exports=function(t,n){var e,u=o(t),a=0,f=[];for(e in u)!r(i,e)&&r(u,e)&&f.push(e);for(;n.length>a;)r(u,e=n[a++])&&(~c(f,e)||f.push(e));return f}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(0),o=e(50),c=e(51),i=e(8);for(var u in o){var a=r[u],f=a&&a.prototype;if(f&&f.forEach!==c)try{i(f,"forEach",c)}catch(t){f.forEach=c}}},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,n,e){"use strict";var r=e(39).forEach,o=e(54);t.exports=o("forEach")?function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}:[].forEach},function(t,n,e){var r=e(2),o=e(41),c=e(1)("species");t.exports=function(t,n){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)?r(e)&&null===(e=e[c])&&(e=void 0):e=void 0),new(void 0===e?Array:e)(0===n?0:n)}},function(t,n,e){var r=e(0),o=e(16),c=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=c},function(t,n,e){"use strict";var r=e(3);t.exports=function(t,n){var e=[][t];return!e||!r((function(){e.call(null,n||function(){throw 1},1)}))}},function(t,n,e){var r=e(0),o=e(30),c=r.WeakMap;t.exports="function"==typeof c&&/native code/.test(o.call(c))},,function(t,n,e){var r=e(12),o=e(35),c=e(47),i=e(7);t.exports=r("Reflect","ownKeys")||function(t){var n=o.f(i(t)),e=c.f;return e?n.concat(e(t)):n}},function(t,n,e){var r=e(13),o=e(18),c=e(59),i=function(t){return function(n,e,i){var u,a=r(n),f=o(a.length),s=c(i,f);if(t&&e!=e){for(;f>s;)if((u=a[s++])!=u)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===e)return t||s||0;return!t&&-1}};t.exports={includes:i(!0),indexOf:i(!1)}},function(t,n,e){var r=e(26),o=Math.max,c=Math.min;t.exports=function(t,n){var e=r(t);return e<0?o(e+n,0):c(e,n)}},,,,,,,function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));class r{constructor(){}saveInLocalStorage(t){localStorage.setItem("cardNews",JSON.stringify(t))}saveSearchWord(t){localStorage.setItem("searchWord",JSON.stringify(t))}getArr(){return JSON.parse(localStorage.getItem("cardNews"))}getSearchWord(){return JSON.parse(localStorage.getItem("searchWord"))}}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,n,e){"use strict";e.r(n);e(113),e(48),e(117);var r,o=e(66),c=e(4),i=new o.a,u=i.getArr(),a=new Date,f=c.h[a.getMonth()],s=document.querySelector(".analitic__date-span");c.e.textContent=i.getSearchWord(),c.d.textContent=u.totalResults,s.textContent=localStorage.getItem("month"),localStorage.setItem("month","".concat(f)),r=0,u.articles.forEach(t=>{t.title.toLowerCase().includes(c.e.textContent.toLowerCase())&&r++}),c.f.textContent=r,function(){var t={};u.articles.forEach(n=>{var e=new Date(n.publishedAt.substring(0,10)).getDate();e in t?t[e]++:t[e]=1});for(var n=new Date((new Date).getTime()-c.g),e=0;e<=6;e++){var r=24*e*60*60*1e3,o=new Date(n.getTime()+r),i=o.getDate(),a=c.a["".concat(o.getDay())];if(document.querySelector(".analitic__table-date".concat(e)).textContent="".concat(i,", ").concat(a),i in t){var f=100*t["".concat(i)]/u.totalResults;document.querySelector(".analitic__table-score".concat(e)).setAttribute("style","padding-right:".concat(f,"%")),document.querySelector(".analitic__table-score".concat(e)).textContent="".concat(t["".concat(i)])}else document.querySelector(".analitic__table-score".concat(e)).setAttribute("padding-right","0%"),document.querySelector(".analitic__table-score".concat(e)).textContent="0"}}()},function(t,n,e){"use strict";var r=e(34),o=e(114),c=e(21);r({target:"String",proto:!0,forced:!e(116)("includes")},{includes:function(t){return!!~String(c(this)).indexOf(o(t),arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(115);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},function(t,n,e){var r=e(2),o=e(9),c=e(1)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[c])?!!n:"RegExp"==o(t))}},function(t,n,e){var r=e(1)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,"/./"[t](n)}catch(t){}}return!1}},function(t,n,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdC9jb25zdGFudHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2JpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0L21vZHVsZXMvRGF0YVN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FuYWxpdGljcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm90LWEtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaXQiLCJNYXRoIiwiY2hlY2siLCJnbG9iYWxUaGlzIiwid2luZG93Iiwic2VsZiIsImdsb2JhbCIsIkZ1bmN0aW9uIiwic2hhcmVkIiwidWlkIiwiTkFUSVZFX1NZTUJPTCIsInN0b3JlIiwiZXhlYyIsImVycm9yIiwiU0lYX0RBWVNfSU5fTUlMTElTRUNPTkQiLCJzZWFyY2hXb3JkIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZWxlbUNvbnRhaW5lckZvck5ld3MiLCJzZWFyY2hCdXR0b24iLCJmaWVsZEZvcm0iLCJGSVJTVF9DT01NSVQiLCJMQVNUX0NPTU1JVCIsInVybEdpdGh1YiIsIlJFUVVFU1RfRUxFTSIsIk5FV1NfSU5fV0VFSyIsIlJFUVVFU1RfSU5fVElUTEUiLCJkYXlzIiwicXVlcnlTZWxlY3RvckFsbCIsIkRBWVNfTElUVExFIiwiZmFpbHMiLCJhIiwiaXNPYmplY3QiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJERVNDUklQVE9SUyIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiZiIsInRvU3RyaW5nIiwic2xpY2UiLCJJU19QVVJFIiwidW5kZWZpbmVkIiwicHVzaCIsInZlcnNpb24iLCJjb3B5cmlnaHQiLCJJRThfRE9NX0RFRklORSIsImFuT2JqZWN0IiwidG9QcmltaXRpdmUiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIk8iLCJQIiwiQXR0cmlidXRlcyIsInBhdGgiLCJhRnVuY3Rpb24iLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsIm1ldGhvZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiaGFzIiwic2V0R2xvYmFsIiwibmF0aXZlRnVuY3Rpb25Ub1N0cmluZyIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJlbmZvcmNlIiwiVEVNUExBVEUiLCJzcGxpdCIsIm9wdGlvbnMiLCJ1bnNhZmUiLCJzaW1wbGUiLCJub1RhcmdldEdldCIsInNvdXJjZSIsImpvaW4iLCJ0aGlzIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJ0b0luZGV4ZWRPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ0b0ludGVnZXIiLCJtaW4iLCJhcmd1bWVudCIsImZuIiwidGhhdCIsImIiLCJhcHBseSIsImlucHV0IiwiUFJFRkVSUkVEX1NUUklORyIsInZhbCIsInZhbHVlT2YiLCJiaXRtYXAiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImlkIiwicG9zdGZpeCIsInJhbmRvbSIsImNsYXNzb2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwiY3JlYXRlRWxlbWVudCIsIkVYSVNUUyIsInNldCIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJXZWFrTWFwIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJTVEFURSIsImdldHRlckZvciIsIlRZUEUiLCJzdGF0ZSIsInR5cGUiLCJrZXlzIiwicmVkZWZpbmUiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJ0YXJnZXQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJmb3JjZWQiLCJzaGFtIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiY29uY2F0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJjcmVhdGVNZXRob2QiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJzcGVjaWZpY0NyZWF0ZSIsInJlc3VsdCIsImJvdW5kRnVuY3Rpb24iLCJpbmRleCIsImZvckVhY2giLCJtYXAiLCJmaWx0ZXIiLCJzb21lIiwiZXZlcnkiLCJmaW5kIiwiZmluZEluZGV4IiwiQXJyYXkiLCJpc0FycmF5IiwiYXJnIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIjEiLCJWIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImluZGV4T2YiLCJuYW1lcyIsIkRPTUl0ZXJhYmxlcyIsIkNPTExFQ1RJT05fTkFNRSIsIkNvbGxlY3Rpb24iLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiZyIsImUiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsIiRmb3JFYWNoIiwic2xvcHB5QXJyYXlNZXRob2QiLCJTUEVDSUVTIiwid2VsbEtub3duU3ltYm9sIiwib3JpZ2luYWxBcnJheSIsIkMiLCJjb25zdHJ1Y3RvciIsIk1FVEhPRF9OQU1FIiwidGVzdCIsImdldEJ1aWx0SW4iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwibWF4IiwiaW50ZWdlciIsIkRhdGFTdG9yYWdlIiwic2F2ZUluTG9jYWxTdG9yYWdlIiwiYXJyIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzYXZlU2VhcmNoV29yZCIsIndvcmQiLCJnZXRBcnIiLCJwYXJzZSIsImdldEl0ZW0iLCJnZXRTZWFyY2hXb3JkIiwidGl0bGVSZXN1bHRzIiwiZGF0YVN0b3JhZ2UiLCJuZXdEYXRlTm93IiwiRGF0ZSIsIk1PTlRIIiwiZ2V0TW9udGgiLCJNT05USF9JTl9UQUJMRSIsInRleHRDb250ZW50IiwidG90YWxSZXN1bHRzIiwiYXJ0aWNsZXMiLCJpdGVtIiwidGl0bGUiLCJuZXdzUmVzdWx0c1BlckRheSIsImRhdGVOZXdzIiwicHVibGlzaGVkQXQiLCJzdWJzdHJpbmciLCJnZXREYXRlIiwiRklSU1RfREFZIiwiZ2V0VGltZSIsImRheXNJbk1pbGxpc2Vjb25kIiwiZGF0ZSIsImRheSIsImxpdHRsZURheXMiLCJnZXREYXkiLCJwZXJjZW50Iiwic2V0QXR0cmlidXRlIiwibmV3c0luRGF5IiwiJCIsIm5vdEFSZWdFeHAiLCJwcm90byIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwic2VhcmNoU3RyaW5nIiwiaXNSZWdFeHAiLCJNQVRDSCIsInJlZ2V4cCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVks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QU9ELElBQVMsRUFDVCxNQUFNMUQsR0FBYTJELEdBQzFCLE1BQU96UCxLQUNULE9BQU8sSSIsImZpbGUiOiJzY3JpcHRzL2FuYWxpdGljcy42YWViMjUyOGI4NGVmOWQxNWU5Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMTIpO1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgc3RvcmUgPSBzaGFyZWQoJ3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPSBOQVRJVkVfU1lNQk9MICYmIFN5bWJvbFtuYW1lXVxuICAgIHx8IChOQVRJVkVfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiLy/Qn9C10YDQtdC80LXQvdC90YvQtSDQtNC70Y8gaW5kZXguanNcbmV4cG9ydCBjb25zdCBTSVhfREFZU19JTl9NSUxMSVNFQ09ORCA9IDYgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuZXhwb3J0IGNvbnN0IHNlYXJjaFdvcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoX19pbnB1dCcpO1xuZXhwb3J0IGNvbnN0IGVsZW1Db250YWluZXJGb3JOZXdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld3MtY2FyZCcpO1xuZXhwb3J0IGNvbnN0IHNlYXJjaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2hfX2J1dHRvbicpO1xuZXhwb3J0IGNvbnN0IGZpZWxkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2hfX2ZpZWxkJyk7XG5cbi8v0J/QtdGA0LXQvNC10L3QvdGL0LUg0LTQu9GPIGFib3V0LmpzXG5leHBvcnQgY29uc3QgRklSU1RfQ09NTUlUID0gMDtcbmV4cG9ydCBjb25zdCBMQVNUX0NPTU1JVCA9IDIwO1xuZXhwb3J0IGNvbnN0IHVybEdpdGh1YiA9ICdodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL0FuZHJleVphZGFjaGluL0RpcGxvbUZyb250L2NvbW1pdHMnO1xuXG4vL9Cf0LXRgNC10LzQtdC90L3Ri9C1INC00LvRjyBhbmFsaXRpY3MuanNcbmV4cG9ydCBjb25zdCBSRVFVRVNUX0VMRU0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVxdWVzdF9fdGl0bGUtc3BhbicpO1xuZXhwb3J0IGNvbnN0IE5FV1NfSU5fV0VFSyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXF1ZXN0X190ZXh0LXNwYW4nKTtcbmV4cG9ydCBjb25zdCBSRVFVRVNUX0lOX1RJVExFID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlcXVlc3RfX3RleHQtc3Bhbl90aXRsZScpO1xuZXhwb3J0IGNvbnN0IHJlcXVlc3REYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFuYWxpdGljX190YWJsZS1kYXRlJyk7XG5leHBvcnQgY29uc3QgZGF5cyA9IFtcItCv0J3QktCQ0KDQrFwiLCBcItCk0JXQktCg0JDQm9CsXCIsIFwi0JzQkNCg0KJcIiwgXCLQkNCf0KDQldCb0KxcIiwgXCLQnNCQ0JlcIiwgXCLQmNCu0J3QrFwiLCBcItCY0K7Qm9CsXCIsIFwi0JDQktCT0KPQodCiXCIsIFwi0KHQldCd0KLQr9CR0KDQrFwiLCBcItCe0JrQotCv0JHQoNCsXCIsIFwi0J3QntCv0JHQoNCsXCIsIFwi0JTQldCa0JDQkdCg0KxcIixdO1xuZXhwb3J0IGNvbnN0IERBWVNfTElUVExFID0gWyAn0LLRgScsICfQv9C9JywgJ9Cy0YInLCAn0YHRgCcsICfRh9GCJywgJ9C/0YInLCAn0YHQsSddO1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuNC4xJyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBuYXRpdmVGdW5jdGlvblRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhuYXRpdmVGdW5jdGlvblRvU3RyaW5nKS5zcGxpdCgndG9TdHJpbmcnKTtcblxuc2hhcmVkKCdpbnNwZWN0U291cmNlJywgZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xufSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYXJlZCgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOyAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNilcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlICYmIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCAhPT0gZm9yRWFjaCkgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmb3JFYWNoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggPSBmb3JFYWNoO1xuICB9XG59XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIHNsb3BweUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9IHNsb3BweUFycmF5TWV0aG9kKCdmb3JFYWNoJykgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59IDogW10uZm9yRWFjaDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gIW1ldGhvZCB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbFxuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QobmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKFdlYWtNYXApKTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGxlbmd0aCwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhU3RvcmFnZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgc2F2ZUluTG9jYWxTdG9yYWdlKGFycikge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjYXJkTmV3cycsIEpTT04uc3RyaW5naWZ5KGFycikpO1xuICB9XG5cbiAgc2F2ZVNlYXJjaFdvcmQod29yZCkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZWFyY2hXb3JkJywgSlNPTi5zdHJpbmdpZnkod29yZCkpO1xuICB9XG5cbiAgZ2V0QXJyKCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjYXJkTmV3cycpKTtcbiAgfVxuXG4gIGdldFNlYXJjaFdvcmQoKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlYXJjaFdvcmQnKSk7XG4gIH1cbn1cbiIsImltcG9ydCAnLi9wYWdlcy9hbmFsaXRpY3MuY3NzJztcbmltcG9ydCBEYXRhU3RvcmFnZSBmcm9tICcuL3NjcmlwdC9tb2R1bGVzL0RhdGFTdG9yYWdlJztcblxuaW1wb3J0IHtSRVFVRVNUX0VMRU0sIE5FV1NfSU5fV0VFSywgUkVRVUVTVF9JTl9USVRMRSwgcmVxdWVzdERhdGUsIGRheXMsIFNJWF9EQVlTX0lOX01JTExJU0VDT05ELCBEQVlTX0xJVFRMRX0gZnJvbSAnLi9zY3JpcHQvY29uc3RhbnRzL2NvbnN0YW50cyc7XG5cbmNvbnN0IGRhdGFTdG9yYWdlID0gbmV3IERhdGFTdG9yYWdlKCk7XG5jb25zdCBhcnIgPSBkYXRhU3RvcmFnZS5nZXRBcnIoKTtcbmNvbnN0IG5ld0RhdGVOb3cgPSBuZXcgRGF0ZSgpO1xuY29uc3QgTU9OVEggPSBkYXlzW25ld0RhdGVOb3cuZ2V0TW9udGgoKV07XG5jb25zdCBNT05USF9JTl9UQUJMRSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbmFsaXRpY19fZGF0ZS1zcGFuJyk7XG5cblJFUVVFU1RfRUxFTS50ZXh0Q29udGVudCA9IGRhdGFTdG9yYWdlLmdldFNlYXJjaFdvcmQoKTtcbk5FV1NfSU5fV0VFSy50ZXh0Q29udGVudCA9IGFyci50b3RhbFJlc3VsdHM7XG5NT05USF9JTl9UQUJMRS50ZXh0Q29udGVudCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtb250aCcpO1xuXG5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShgbW9udGhgLCBgJHtNT05USH1gKTtcblxuLy/Qn9C+0LTRgdGH0LXRgiDQvtCx0YnQtdCz0L4g0LrQvtC70LjRh9C10YHRgtCy0LAg0YPQv9C+0LzQuNC90LDQvdC40Y8g0YHRgtCw0YLQtdC5INCyINC30LDQs9C+0LvQvtCy0LrQsNGFXG5mdW5jdGlvbiByZXF1ZXN0c1RpdGxlKCkge1xuICBsZXQgdGl0bGVSZXN1bHRzID0gMDtcbiAgYXJyLmFydGljbGVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpZiAoaXRlbS50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFJFUVVFU1RfRUxFTS50ZXh0Q29udGVudC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICB0aXRsZVJlc3VsdHMrKztcbiAgICAgIH1cbiAgfSk7XG4gIFJFUVVFU1RfSU5fVElUTEUudGV4dENvbnRlbnQgPSB0aXRsZVJlc3VsdHM7XG59O1xuXG4vL9Ce0YLRgNC40YHQvtCy0LrQsCDQs9GA0LDRhNC40LrQsCDQv9C+INC60L7Qu9C40YfQtdGB0YLQstGDINC90L7QstC+0YHRgtC10Lkg0LIg0L/RgNC+0YbQtdC90YLQsNGFINC+0YIg0L7QsdGJ0LXQs9C+INGH0LjRgdC70LBcbmZ1bmN0aW9uIG5ld3NJbkRheSgpIHtcbiAgbGV0IG5ld3NSZXN1bHRzUGVyRGF5ID0ge307XG4gIGFyci5hcnRpY2xlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGNvbnN0IGRhdGVOZXdzID0gbmV3IERhdGUoaXRlbS5wdWJsaXNoZWRBdC5zdWJzdHJpbmcoMCwgMTApKS5nZXREYXRlKCk7XG4gICAgaWYgKGRhdGVOZXdzIGluIG5ld3NSZXN1bHRzUGVyRGF5KSB7XG4gICAgICBuZXdzUmVzdWx0c1BlckRheVtkYXRlTmV3c10rKztcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3c1Jlc3VsdHNQZXJEYXlbZGF0ZU5ld3NdID0gMTtcbiAgICB9XG59KTtcblxuY29uc3QgRklSU1RfREFZID0gbmV3IERhdGUobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBTSVhfREFZU19JTl9NSUxMSVNFQ09ORCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDw9IDY7IGkrKykge1xuICAgIGNvbnN0IGRheXNJbk1pbGxpc2Vjb25kID0gaSAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKEZJUlNUX0RBWS5nZXRUaW1lKCkgKyBkYXlzSW5NaWxsaXNlY29uZCk7XG4gICAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgY29uc3QgbGl0dGxlRGF5cyA9IERBWVNfTElUVExFW2Ake2RhdGUuZ2V0RGF5KCl9YF07XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmFuYWxpdGljX190YWJsZS1kYXRlJHtpfWApLnRleHRDb250ZW50ID0gYCR7ZGF5fSwgJHtsaXR0bGVEYXlzfWA7XG4gICAgaWYgKGRheSBpbiBuZXdzUmVzdWx0c1BlckRheSkge1xuICAgICAgY29uc3QgcGVyY2VudCA9IG5ld3NSZXN1bHRzUGVyRGF5W2Ake2RheX1gXSAqIDEwMCAvIGFyci50b3RhbFJlc3VsdHM7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuYW5hbGl0aWNfX3RhYmxlLXNjb3JlJHtpfWApLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgcGFkZGluZy1yaWdodDoke3BlcmNlbnR9JWApO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmFuYWxpdGljX190YWJsZS1zY29yZSR7aX1gKS50ZXh0Q29udGVudCA9IGAke25ld3NSZXN1bHRzUGVyRGF5W2Ake2RheX1gXX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuYW5hbGl0aWNfX3RhYmxlLXNjb3JlJHtpfWApLnNldEF0dHJpYnV0ZSgncGFkZGluZy1yaWdodCcsICcwJScpO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmFuYWxpdGljX190YWJsZS1zY29yZSR7aX1gKS50ZXh0Q29udGVudCA9ICcwJztcbiAgICB9XG4gIH1cbn07XG5cblxucmVxdWVzdHNUaXRsZSgpO1xubmV3c0luRGF5KCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdFeHBMb2dpYygnaW5jbHVkZXMnKSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+U3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpXG4gICAgICAuaW5kZXhPZihub3RBUmVnRXhwKHNlYXJjaFN0cmluZyksIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1JlZ0V4cChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxuLy8gYElzUmVnRXhwYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjbGFzc29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHZhciByZWdleHAgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVnZXhwW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiBmYWxzZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9